import streamlit as st
import pandas as pd

# --- Sayfa AyarlarÄ± (SayfanÄ±n daha profesyonel gÃ¶rÃ¼nmesi iÃ§in) ---
st.set_page_config(
    page_title="SatÄ±ÅŸ Temsilcisi Raporlama",
    page_icon="ğŸ“Š",
    layout="wide"
)

# --- KULLANICI AYARLARI ---
DOSYA_YOLU = 'rapor.xls'
TEMSILCI_SUTUNU = 'ST'
MUSTERI_SUTUNU = 'MÃ¼ÅŸteri'
TUTAR_SUTUNU = 'Kalan Tutar Total'

# --- Fonksiyonlar (Kodun daha dÃ¼zenli olmasÄ± iÃ§in) ---

# Bu fonksiyon Excel'i okur ve Ã¶n hazÄ±rlÄ±ÄŸÄ± yapar.
# @st.cache_data sayesinde Excel sadece bir kere okunur, bu da programÄ± hÄ±zlandÄ±rÄ±r.
@st.cache_data
def veri_yukle(dosya_yolu):
    try:
        df = pd.read_excel(dosya_yolu)
        # HatalarÄ± Ã¶nlemek iÃ§in Ã¶nemli sÃ¼tunlarÄ± metin formatÄ±na Ã§eviriyoruz.
        df[TEMSILCI_SUTUNU] = df[TEMSILCI_SUTUNU].astype(str)
        df[MUSTERI_SUTUNU] = df[MUSTERI_SUTUNU].astype(str)
        # BoÅŸ (nan) temsilci isimlerini temizleyelim.
        df = df[df[TEMSILCI_SUTUNU] != 'nan']
        return df
    except FileNotFoundError:
        st.error(f"HATA: '{DOSYA_YOLU}' adÄ±nda bir dosya bulunamadÄ±! LÃ¼tfen dosyanÄ±n doÄŸru klasÃ¶rde olduÄŸundan emin olun.")
        return None
    except KeyError as e:
        st.error(f"HATA: Excel dosyasÄ±nda '{e}' sÃ¼tunu bulunamadÄ±! LÃ¼tfen yukarÄ±daki sÃ¼tun isimlerini kontrol edin.")
        return None

# Ana veriyi yÃ¼kleyelim
df = veri_yukle(DOSYA_YOLU)

# --- ARAYÃœZ KISMI ---

# EÄŸer veri baÅŸarÄ±yla yÃ¼klendiyse arayÃ¼zÃ¼ gÃ¶ster
if df is not None:
    st.title('ğŸ“Š SatÄ±ÅŸ Temsilcisi Performans Raporu')
    st.markdown("Bu arayÃ¼z, satÄ±ÅŸ temsilcilerinin bakiyelerini ve mÃ¼ÅŸteri dÃ¶kÃ¼mlerini interaktif olarak gÃ¶sterir.")

    # Temsilci listesini al ve baÅŸÄ±na "TÃ¼m Temsilciler" seÃ§eneÄŸi ekle
    temsilci_listesi = sorted(df[TEMSILCI_SUTUNU].unique())
    temsilci_listesi.insert(0, "TÃ¼m Temsilciler")

    st.sidebar.header('Filtreleme SeÃ§enekleri')
    secilen_temsilci = st.sidebar.selectbox(
        'GÃ¶rÃ¼ntÃ¼lemek istediÄŸiniz temsilciyi seÃ§in:',
        temsilci_listesi
    )

    # SeÃ§ime gÃ¶re veriyi filtrele
    if secilen_temsilci == "TÃ¼m Temsilciler":
        filtrelenmis_df = df
        st.header("TÃ¼m Temsilciler Genel Durum")
    else:
        filtrelenmis_df = df[df[TEMSILCI_SUTUNU] == secilen_temsilci]
        st.header(f"{secilen_temsilci} Raporu")

    # FiltrelenmiÅŸ veriden hesaplamalarÄ± yap
    toplam_bakiye = filtrelenmis_df[TUTAR_SUTUNU].sum()
    musteri_sayisi = filtrelenmis_df[MUSTERI_SUTUNU].nunique()
    pozitif_bakiye_df = filtrelenmis_df[filtrelenmis_df[TUTAR_SUTUNU] > 0]
    
    # --- Rapor KartlarÄ± (KPI'lar) ---
    col1, col2 = st.columns(2)
    col1.metric("Toplam Bakiye", f"{toplam_bakiye:,.2f} TL")
    col2.metric("MÃ¼ÅŸteri SayÄ±sÄ±", f"{musteri_sayisi} MÃ¼ÅŸteri")

    st.markdown("---")

    # --- MÃ¼ÅŸteri DetaylarÄ± Tablosu ---
    st.subheader("MÃ¼ÅŸteri Bakiye DÃ¶kÃ¼mÃ¼ (Sadece Pozitif Bakiyeler)")
    
    if not pozitif_bakiye_df.empty:
        # GÃ¶sterilecek sÃ¼tunlarÄ± seÃ§ip yeniden adlandÄ±ralÄ±m
        gosterilecek_tablo = pozitif_bakiye_df[[MUSTERI_SUTUNU, TUTAR_SUTUNU, TEMSILCI_SUTUNU]]
        gosterilecek_tablo = gosterilecek_tablo.rename(
            columns={
                MUSTERI_SUTUNU: 'MÃ¼ÅŸteri AdÄ±',
                TUTAR_SUTUNU: 'Bakiye (TL)',
                TEMSILCI_SUTUNU: 'Temsilci'
            }
        ).sort_values(by='Bakiye (TL)', ascending=False)
        
        # Streamlit'in interaktif tablo Ã¶zelliÄŸini kullanalÄ±m
        st.dataframe(gosterilecek_tablo, use_container_width=True, hide_index=True)
    else:
        st.warning("SeÃ§ilen filtreye uygun pozitif bakiye bulunmamaktadÄ±r.")